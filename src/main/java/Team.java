import csv.CSVReader;
import employees.Employee;
import employees.ProductOwner;
import employees.Tester;
import employees.developers.Developer;
import employees.developers.LeadDeveloper;
import exceptions.EmptyTeamException;
import exceptions.InvalidEmployeeDataException;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Team {

    private List<Employee> employees = new ArrayList<>();
    private String name;

    public Team(String name) {
        this.name = name;
    }

    /**
     * @param teams takes in a list of teams that will be used to get employees descriptions from.
     * @return the String generated by the method.
     * @throws EmptyTeamException if teams in the parameter are empty
     * Static method so it does not have to be instantiated to be called.
     */
    public static String generateReport(List<Team> teams) throws EmptyTeamException {
        List<String> descriptions = new ArrayList<>();
        if (!teams.isEmpty()) {
            for (Team team : teams) {
                descriptions.add("Product owner(s) from " + team.name + ":");
                for (Employee employee : team.employees) {
                    if (employee instanceof ProductOwner) {
                        descriptions.add(employee.toString());
                    }
                }
                descriptions.add("Lead Developer(s) from " + team.name + ":");
                for (Employee employee : team.employees) {
                    if (employee instanceof LeadDeveloper) {
                        descriptions.add(employee.toString());
                    }
                }
                descriptions.add("Tester(s) from " + team.name + ":");
                for (Employee employee : team.employees) {
                    if (employee instanceof Tester) {
                        descriptions.add(employee.toString());
                    }
                }
                descriptions.add("Developer(s) from " + team.name + ":");
                for (Employee employee : team.employees) {
                    if (employee instanceof Developer && !(employee instanceof LeadDeveloper)) {
                        descriptions.add(employee.toString());
                    }
                }
            }
        } else {
            throw new EmptyTeamException();
        }

        StringBuilder reportBuilder = new StringBuilder();
        for (String str : descriptions) {
            reportBuilder.append(str);
            reportBuilder.append("\n");
        }

        return reportBuilder.toString();
    }

    /**
     * @param reader that processes employees and places them inside the employees list.
     */
    public void populateEmployeeList(CSVReader reader) {
        try {
            List<String> stringList = reader.readFile(new File("src/main/resources/organisation-data.csv"));
            List<String> teamList = new ArrayList<>();
            for (String str : stringList) {
                String[] strings = reader.parseLine(str);
                if (name.equals(strings[0])) {
                    teamList.add(str);
                }
            }

            for (String str : teamList) {
                String[] strings = reader.parseLine(str);
                switch (strings[1]) {
                    case "ProductOwner":
                        employees.add(new ProductOwner(Integer.parseInt(strings[2]), name, "Not known"));
                        break;
                    case "Developer":
                        employees.add(new Developer(Integer.parseInt(strings[2]), name, "Not known"));
                        break;
                    case "Tester":
                        employees.add(new Tester(Integer.parseInt(strings[2]), name, "Not known", false, "Not known"));
                        break;
                    case "LeadDeveloper":
                        employees.add(new LeadDeveloper(Integer.parseInt(strings[2]), name, "Not known", 0, "Not known"));
                        break;
                }
            }
            for (Employee employee : employees) {
                employee.setEmployeeData(reader);
            }
        } catch (Exception | InvalidEmployeeDataException e) {
            System.err.println("Populating employees list was not successful.");
            System.err.println(e.getMessage());
        }
    }

    public List<Employee> getEmployees() {
        return employees;
    }

    public void setEmployees(List<Employee> employees) {
        this.employees = employees;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
